===============================================
Format:
===============================================
Header:
	Magic: "DanWorld" DanString
	Version: u8
	Dimension: u8 DanDimension
	Width: u16
	Depth: u16
	Chunks: Chunk data[]
	Extra: DanExtra[]

Chunk data:
	x: u16
	z: u16
	num_sections: u8 
	Sections: Chunk sections[]

Chunk sections:
	palette_len: u8
	Palette: DanString[] of Minecraft namespaced keys for indexing
	blocks_len: u16
	Blocks: u8[], value corresponds to the palette index
	Biomes: u8[], DanBiome::from::<u8>()
	Data: u16[], See impl notes

Number of DanExtra: u32
DanExtra[]:
	Key: DanString,
	Value: u8[]

===============================================

Types:
===============================================
DanString:
	len: u8
	bytes: len * UTF-8 encoded bytes

Array<T>:
	len: numeric, this is not standard across different uses, sorry
	bytes: T[len]
===============================================

Implementation:
===============================================
Chunks
	Chunks are always iterated over in XZ order, i.e.
	X = 0 Z = 0
	X = 0 Z = 1
	...
	X = 0 Z = n
	X = 1 Z = 0

	When Y is part of the iteration, the order is then YXZ.

Block data
	Block data is encoded as a length-prefixed number of u16s.
	[0] means no data
	[n, block, elems...]
	 ^  ^
	 |  +- Bit field: XXXX YYYY ZZZZ NNNN
	 |                ^    ^    ^    ^
	 |  			  |    |    |    +- Number of data elements for this block to follow
	 |  			  |    |    +- Z coordinate in the chunk section (0 - 16)
	 |  		      |    +- Y coordinate in the chunk section (0 - 16)
	 |  			  +- X coordinate in the chunk section (0 - 16)
	 +- Total number of block data entries in the array

DanDimension
	0 => Overworld
	1 => Nether
	2 => The End


TODO:
* Spawn position markers
* Custom entity support (can be as simple as display entities with custom names and data)
	* Entity[x = a, y = b, z = c, Name = "SheepTagSpawn"]
	* Entity[x = a, y = b, z = c, Name = "WorldOrigin"]
	* ...
* Tile entities (signs, etc)
* Living entities are not needed at all. All entities are spawned in game on the server, and are never serialized with the world
